*actions*  this addon provides a list of actions which can be mapped to keys  
                    Author: Marc Weber, marco-oweber@gmx.de

-----------------------------------------------------------------------
HOWTO~

Example usage adding an action running make: >

  call actions#AddAction("run make",{'buffer':'<buffer>', 'action':'make'})
<
  more advanced example which does some lazy configuring: >
  call actions#AddAction("run make",{'buffer':'<buffer>', 'action': funcref#Function('return "make -f ".FindMakeFile()') })
<

  Then you press <s-F2> to assign an action to the f2 key. Have a look at the
  default key assignments in plugin/actions.vim

  You can also use >
  ActionOnWrite[!]
< to run an action whenever you write a buffer. (Also see 'autowrite')

  If you want to run multiple commands in order return a list of strings.
  They'll be joined by "<bar>". So use exec "your command" if it doesn't support
  bang

  If you use bang (add the ! to the command) the command will be run once

  TIP: You can use the vim-addon-backrgound-cmd to run compilations or tagging
  commands in background!

  Real  world example from vim-addon-ocmal: >
  let s:efm = 'set efm=%+AFile\ \"%f\"\\,\ line\ %l\\,\ characters\ %c-%*\\d:,%Z%m'
  call actions#AddAction('ocamlc current file', {'action': funcref#Function('actions#CompileRHSSimple', {'args': [[s:efm], ["ocamlc", '-annot', '-o', funcref#Function('return expand("%:r:t")'), funcref#Function('return expand("%")')]]})})
  call actions#AddAction('ocamlc run result', {'action': funcref#Function('actions#CompileRHSSimple', {'args': [[], [funcref#Function('return "./".expand("%:r:t")')]]})})
<

-----------------------------------------------------------------------
plugins supporting vim-addon-actions~

3rd party plugins:
  SingleCompile: http://www.vim.org/scripts/script.php?script_id=3115
  vim-ruby-debugger

many of my plugins:
  vim-addon-background-cmd
  vim-addon-fcsh
  vim-addon-haskell
  vim-addon-nix
  vim-addon-sbt
  vim-addon-ocaml
  vim-addon-povray
  vim-haxe
  ...

-----------------------------------------------------------------------
CUSTOMIZATION~

  You can override the default mappings. This example will let you use \a to
  assign a mapping to <c-a>: >
  let g:vim_actions = {}
  let g:vim_actions['bindable_keys'] = [ ['\a', '<c-a>'] ]
<


-----------------------------------------------------------------------
related work:

  SingleCompile : Let user compile or run a single source file conveniently
  http://www.vim.org/scripts/script.php?script_id=3115

  Quickrun:
  http://www.vim.org/scripts/script.php?script_id=3146
  http://github.com/thinca/vim-quickrun/blob/master/plugin/quickrun.vim
